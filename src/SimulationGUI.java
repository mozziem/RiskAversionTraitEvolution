
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 * This is the main class with GUI and the simulation method, has various static variables with values set by the users
 * Recommended values: earn 2.5, survival cost 2.0
 * @author Fumi Honda 108180831
 */
public class SimulationGUI extends javax.swing.JDialog {

    static double averseBetProb = .7;
    static double neutralBetProb = 1.0;
    static Population thePop;
    static int numPopulation;
    static int riskAversePopCount = 0;   // numPopulation / 2;
    static int riskNeutralPopCount = 0;  //  numPopulation / 2;
    static double socResource;
    static double moneyEarned;
    static int dyingAge = 50;
    static int comingOfAge = 15;
    static double surviveMoney;
    static String eachSecondResult="";

    /**
     * Creates new form SimulationGUI
     */
    public SimulationGUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Input duration: ");

        jLabel2.setText("Input even numPopulation: ");

        jLabel3.setText("Input money earned per second: ");

        jLabel4.setText("Input survival amount $ needed: ");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("  ");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1))
                            .addComponent(jLabel2))
                        .addGap(31, 31, 31)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                            .addComponent(jTextField4))))
                .addContainerGap(98, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(117, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * Note: the commented out section allows sorting by just age only, or just childProduced, or child grown
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        int duration = Integer.parseInt(JOptionPane.showInputDialog("Input duration: "));       
        numPopulation = Integer.parseInt(JOptionPane.showInputDialog("Input even numPopulation"));
        //System.out.println("Input societal resource $ amount");
        //socResource = stdin.nextDouble();
        moneyEarned = Double.parseDouble(JOptionPane.showInputDialog("Input money earned per second"));
        surviveMoney = Double.parseDouble(JOptionPane.showInputDialog("Input survival amount $ needed"));
        thePop = new Population(numPopulation);

        simulate(duration);
        displayResult();
                
        populationTally();
        msgbox("\n" + "~~~RiskAversePopCount " + riskAversePopCount + ", RiskNeutralPopCount " + riskNeutralPopCount + "~~~");

        thePop.sortEverything();
        msgbox(thePop.adultToString());

        /**
         * thePop.sortAge();
         * System.out.println(thePop.getAdultList().get(0).getAge());
         * System.out.println(thePop.ageToString()); thePop.sortChildProduced();
         * System.out.println(thePop.childProducedToString());
         * thePop.sortChildGrown();
         * System.out.println(thePop.childGrownToString()); //child
         *
         */
        
        /**        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SimulationGUI dialog = new SimulationGUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
        
        **/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
/**
     * Both adult and child checks their age first before performing actions
     * after actions, update age afterward
     * @param duration
     */
    public static void simulate(int duration) { //return Population?
        int time = 1;
                
        while (duration >= 0) {
            
            eachSecondResult+= "\n\n" + "Time" + time;

            for (int i = 0; i < thePop.getAdultList().size(); i++) {
                Adult anAdult = thePop.getAdultList().get(i);

                if (anAdult.isAlive()) {

                    if (anAdult.getAge() >= dyingAge) {
                        anAdult.setDead();
                    } else {
                        anAdult.setMoney(anAdult.hasMoney() + moneyEarned);
                        anAdult.bet();  //here adult can have bet with the only $2.5 left
                        anAdult.feedSelf(surviveMoney);
                        anAdult.reproduction(); //in the same sec, can produce and feed
                        anAdult.addAge();
                    }
                }
                if (anAdult.getLifetimeChildProduced() > 0) {
                    for (int j = 0; j < anAdult.getChildList().size(); j++) {
                        Child aChild = anAdult.getChildList().get(j);

                        if (!anAdult.isAlive()) {
                            aChild.setDead();
                        } else if (aChild.getAge() == comingOfAge) {
                            aChild.setOfAge();
                            Adult newAdult = new Adult();
                            newAdult.setRiskAverse(anAdult.getRiskAverse());                            
                            thePop.getAdultList().add(newAdult);
                            anAdult.addLifetimeChildGrown();
                        } else if (aChild.getAge() < comingOfAge) {
                            anAdult.feedChild();
                            aChild.addAge();
                        }
                    }
                }
                eachSecondResult+= "\n"+"Adult " + i + " is " + anAdult.getAge() + " old. Is alive? " + anAdult.isAlive() + " Risk Averse?" + anAdult.getRiskAverse() + " , has $" + anAdult.hasMoney() + " He produced " + anAdult.getLifetimeChildProduced() + " children, " + anAdult.childListString();
                //later change to toString method in adult class
                anAdult.setMoney( Math.round((anAdult.hasMoney() * 0.9*100)/100 )   );
            }
            duration--;
            time++;
            //  socResource = Math.round(socResource*0.9);
        }

    }

    /**
     * A dialog box with prompting message and String input field     *
     * @param s String
     */
    static void msgbox(String s) {
        JOptionPane.showMessageDialog(null, s);
    }

    /**
     * changes the static riskAversePopCount and riskNeutralPopCount
     */
    static void populationTally() {
        for (Adult anAdult : thePop.getAdultList()) {
            if (anAdult.getRiskAverse() && anAdult.isAlive()) {
                riskAversePopCount++;
            } else if (!anAdult.getRiskAverse() && anAdult.isAlive()) {
                riskNeutralPopCount++;
            }
        }
    }
    
    /**
     * Create a ScrollPane to display String eachSecondResult
     */
    static void displayResult(){
        JTextArea textArea = new JTextArea(40, 50);
        
        textArea.setText(eachSecondResult);
        textArea.setEditable(false);

        // wrap a scrollpane around it
        JScrollPane scrollPane = new JScrollPane(textArea);
       
        // display them in a message dialog
        JOptionPane.showMessageDialog(null, scrollPane);
    }
    
}
